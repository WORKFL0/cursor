version: '3.8'

services:
  # Main application - Staging
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
      args:
        - NODE_ENV=staging
    image: workflo/new-project:staging-${GITHUB_SHA:-latest}
    container_name: workflo-app-staging
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=staging
      - NEXT_PUBLIC_APP_ENV=staging
      - PORT=3000
      - HOSTNAME=0.0.0.0
    env_file:
      - .env.staging
    volumes:
      - app_logs:/app/logs
      - /app/node_modules
    networks:
      - staging_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.workflo-staging.rule=Host(`staging.workflo.it`)"
      - "traefik.http.routers.workflo-staging.tls=true"
      - "traefik.http.routers.workflo-staging.tls.certresolver=letsencrypt"
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # PostgreSQL - Staging Database
  postgres:
    image: postgres:15-alpine
    container_name: workflo-postgres-staging
    environment:
      POSTGRES_DB: workflo_staging
      POSTGRES_USER: workflo_staging
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-staging_secure_password_change_in_production}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5433:5432"
    networks:
      - staging_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U workflo_staging -d workflo_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis - Session Store and Caching
  redis:
    image: redis:7-alpine
    container_name: workflo-redis-staging
    ports:
      - "6380:6379"
    volumes:
      - redis_data_staging:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - staging_network
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx - Reverse Proxy (Optional for staging)
  nginx:
    image: nginx:alpine
    container_name: workflo-nginx-staging
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./config/nginx/staging.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - staging_network
    restart: unless-stopped
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus (Staging)
  prometheus:
    image: prom/prometheus:latest
    container_name: workflo-prometheus-staging
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_staging:/prometheus
    networks:
      - staging_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Monitoring - Grafana (Staging)
  grafana:
    image: grafana/grafana:latest
    container_name: workflo-grafana-staging
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-staging_admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data_staging:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - staging_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Log Management - Loki (Staging)
  loki:
    image: grafana/loki:latest
    container_name: workflo-loki-staging
    ports:
      - "3101:3100"
    volumes:
      - ./monitoring/loki/staging-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data_staging:/tmp/loki
    networks:
      - staging_network
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml

  # Automated Updates - Watchtower
  watchtower:
    image: containrrr/watchtower
    container_name: workflo-watchtower-staging
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_WEBHOOK_URL}
    networks:
      - staging_network
    restart: unless-stopped

volumes:
  postgres_data_staging:
    name: workflo_postgres_staging
    driver: local
  redis_data_staging:
    name: workflo_redis_staging
    driver: local
  app_logs:
    name: workflo_app_logs_staging
    driver: local
  nginx_logs:
    name: workflo_nginx_logs_staging
    driver: local
  prometheus_data_staging:
    name: workflo_prometheus_staging
    driver: local
  grafana_data_staging:
    name: workflo_grafana_staging
    driver: local
  loki_data_staging:
    name: workflo_loki_staging
    driver: local

networks:
  staging_network:
    name: workflo_staging_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16