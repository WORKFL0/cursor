name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1
  # Required for build-time environment checks
  DATABASE_URL: 'postgresql://ci:ci@localhost:5432/ci_test'
  NEXT_PUBLIC_SUPABASE_URL: 'https://fake.supabase.co'
  NEXT_PUBLIC_SUPABASE_ANON_KEY: 'fake_anon_key_for_ci'
  SUPABASE_SERVICE_ROLE_KEY: 'fake_service_role_key_for_ci'
  NEXTAUTH_SECRET: 'ci-test-secret-key-change-in-production'
  NEXTAUTH_URL: 'http://localhost:3000'
  FORCE_COLOR: 3

jobs:
  # Job 1: Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run TypeScript check
        run: npm run type-check
        env:
          NODE_ENV: production
        continue-on-error: true # Allow to continue while fixing existing TS issues
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run Prettier check
        run: npx prettier --check .
      
      - name: Security audit
        run: npm audit --audit-level high
      
      - name: Check for duplicate packages
        run: npx depcheck
        continue-on-error: true
      
      - name: SAST - CodeQL Analysis Setup
        uses: github/codeql-action/init@v4
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml
        continue-on-error: true
      
      - name: SAST - CodeQL Analysis
        uses: github/codeql-action/analyze@v4
        continue-on-error: true
      
      - name: License compliance check
        run: npx license-checker --onlyAllow 'MIT;Apache-2.0;ISC;BSD-2-Clause;BSD-3-Clause;Unlicense;CC0-1.0' --excludePackages 'fsevents@2.3.3'
        continue-on-error: true

  # Job 2: Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run unit tests
        run: npm run test:unit --if-present
        env:
          CI: true
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        if: steps.check-playwright.outputs.files_exists == 'true'
      
      - name: Check if Playwright config exists
        id: check-playwright
        run: |
          if [ -f "playwright.config.ts" ] || [ -f "playwright.config.js" ]; then
            echo "files_exists=true" >> $GITHUB_OUTPUT
          else
            echo "files_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run E2E tests
        if: steps.check-playwright.outputs.files_exists == 'true'
        run: npm run test:e2e --if-present
        env:
          CI: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Job 3: Build and Bundle Analysis
  build:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Analyze bundle size
        uses: nextjs-bundle-analysis/bundle-analyzer@v1
        with:
          workflow-id: ci
          base-branch: main
        if: github.event_name == 'pull_request'
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            !.next/cache
          retention-days: 1

  # Job 4: Docker Build and Security Scan
  docker:
    name: Docker Build & Security
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: workflo/new-project:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          outputs: type=docker,dest=/tmp/workflo-image.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/workflo-image.tar
          retention-days: 1
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          input: '/tmp/workflo-image.tar'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Upload Trivy FS scan results
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
      
      - name: Docker image size analysis
        run: |
          docker load -i /tmp/workflo-image.tar
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
          echo "Docker image built successfully"

  # Job 5: Lighthouse Performance Audit
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-files
          path: .next/
      
      - name: Start test server
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000
      
      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000
      
      - name: Run Lighthouse CI
        run: npx @lhci/cli@0.12.x autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_SERVER_BASE_URL: ${{ secrets.LHCI_SERVER_BASE_URL }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}

  # Job 6: Deploy to Vercel (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, test, build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
      
      - name: Comment deployment URL
        uses: actions/github-script@v8
        if: github.event_name == 'push'
        with:
          script: |
            const deploymentUrl = process.env.VERCEL_URL || 'https://workflo.vercel.app';
            console.log(`Deployed to production: ${deploymentUrl}`);

  # Job 7: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

  # Job 8: Notify Deployment Status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always() && (needs.deploy-production.result != 'skipped' || needs.deploy-staging.result != 'skipped')
    
    steps:
      - name: Notify Slack on Success
        if: ${{ contains(needs.*.result, 'success') }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Workflo New Project deployed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Slack on Failure
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Workflo New Project deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}