name: Deploy to Staging

on:
  push:
    branches: [staging]
  pull_request:
    branches: [staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - staging-preview

env:
  NODE_VERSION: '20'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Job 1: Quality checks for staging deployment
  staging-quality:
    name: Staging Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run TypeScript check
        run: npm run type-check
        env:
          NODE_ENV: staging
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run Prettier check
        run: npx prettier --check .

  # Job 2: Build for staging
  staging-build:
    name: Build for Staging
    runs-on: ubuntu-latest
    needs: staging-quality
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: staging
          # Staging-specific environment variables
          NEXT_PUBLIC_APP_ENV: staging
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
          NEXTAUTH_SECRET: ${{ secrets.STAGING_NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.STAGING_NEXTAUTH_URL }}
      
      - name: Upload staging build
        uses: actions/upload-artifact@v4
        with:
          name: staging-build
          path: |
            .next/
            !.next/cache
          retention-days: 7

  # Job 3: Run staging tests
  staging-tests:
    name: Staging Tests
    runs-on: ubuntu-latest
    needs: staging-quality
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run unit tests
        run: npm run test:unit --if-present
        env:
          CI: true
          NODE_ENV: staging

  # Job 4: Deploy to staging
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [staging-quality, staging-build, staging-tests]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: 
      name: staging
      url: ${{ steps.deploy.outputs.preview-url }}
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download staging build
        uses: actions/download-artifact@v4
        with:
          name: staging-build
          path: .next/
      
      - name: Deploy to Vercel Staging
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--target staging --prod'
          alias-domains: |
            staging.workflo.it
            staging-${{ github.sha }}.workflo.it
          working-directory: ./
      
      - name: Update deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.preview-url }}' || 'https://staging.workflo.it';
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: status,
              target_url: deploymentUrl,
              description: `Staging deployment ${status}`,
              environment: 'staging'
            });
            
            console.log(`Staging deployed: ${deploymentUrl}`);

  # Job 5: Preview deployment for PRs
  deploy-preview:
    name: Deploy PR Preview
    runs-on: ubuntu-latest
    needs: [staging-quality, staging-build, staging-tests]
    if: github.event_name == 'pull_request'
    environment: 
      name: staging-preview
      url: ${{ steps.deploy-preview.outputs.preview-url }}
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download staging build
        uses: actions/download-artifact@v4
        with:
          name: staging-build
          path: .next/
      
      - name: Deploy PR Preview
        id: deploy-preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          alias-domains: |
            pr-${{ github.event.number }}.workflo.it
          working-directory: ./
      
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const previewUrl = '${{ steps.deploy-preview.outputs.preview-url }}';
            const comment = `🚀 **Staging Preview Deployed**
            
            **Preview URL**: ${previewUrl}
            **Environment**: Staging Preview
            **Commit**: ${{ github.sha }}
            
            Changes will be automatically deployed when this PR is merged to the staging branch.`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 6: Staging smoke tests
  staging-smoke-tests:
    name: Staging Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
      
      - name: Run smoke tests against staging
        run: |
          # Create smoke test configuration
          cat > playwright-staging.config.ts << 'EOF'
          import { defineConfig } from '@playwright/test';
          
          export default defineConfig({
            testDir: './tests/smoke',
            timeout: 30000,
            retries: 2,
            workers: 1,
            reporter: 'html',
            use: {
              baseURL: process.env.STAGING_URL || 'https://staging.workflo.it',
              headless: true,
              screenshot: 'only-on-failure',
              video: 'retain-on-failure',
            },
            projects: [
              {
                name: 'staging-smoke',
                use: { 
                  browserName: 'chromium',
                  viewport: { width: 1280, height: 720 }
                },
              },
            ],
          });
          EOF
          
          # Run basic smoke tests
          npx playwright test --config=playwright-staging.config.ts
        env:
          STAGING_URL: ${{ needs.deploy-staging.outputs.preview-url || 'https://staging.workflo.it' }}
      
      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-smoke-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 14

  # Job 7: Notify teams
  notify-staging:
    name: Notify Staging Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, staging-smoke-tests]
    if: always() && github.ref == 'refs/heads/staging'
    
    steps:
      - name: Notify Slack on Success
        if: ${{ needs.deploy-staging.result == 'success' && needs.staging-smoke-tests.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🎉 Staging deployment successful!
            
            **Environment**: Staging
            **URL**: https://staging.workflo.it
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
            **Smoke Tests**: ✅ Passed
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify Slack on Failure
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ❌ Staging deployment failed!
            
            **Environment**: Staging
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
            
            Please check the GitHub Actions logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}