version: '3.8'

services:
  # Main Next.js application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: workflo-new-project
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=postgresql://postgres:password@db:5432/workflo_dev
      - REDIS_URL=redis://redis:6379
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=development
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - workflo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development version with hot reload
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: workflo-new-project-dev
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - DATABASE_URL=postgresql://postgres:password@db:5432/workflo_dev
      - REDIS_URL=redis://redis:6379
      - WATCHPACK_POLLING=true
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - workflo-network
    command: npm run dev
    profiles:
      - dev

  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: workflo-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=workflo_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - workflo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d workflo_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: workflo-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - workflo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --requirepass password

  # Nginx Reverse Proxy (for production-like testing)
  nginx:
    image: nginx:alpine
    container_name: workflo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
    depends_on:
      - app
    networks:
      - workflo-network
    profiles:
      - production

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: workflo-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - workflo-network
    profiles:
      - monitoring

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: workflo-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - workflo-network
    profiles:
      - monitoring

  # Uptime monitoring with Uptime Kuma
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: workflo-uptime-kuma
    restart: unless-stopped
    ports:
      - "3004:3001"
    volumes:
      - uptime_kuma_data:/app/data
    networks:
      - workflo-network
    profiles:
      - monitoring

  # Database administration with pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: workflo-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@workflo.it
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - workflo-network
    profiles:
      - dev

  # Redis administration with Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: workflo-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:password
    depends_on:
      - redis
    networks:
      - workflo-network
    profiles:
      - dev

networks:
  workflo-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  uptime_kuma_data:
    driver: local
  pgadmin_data:
    driver: local