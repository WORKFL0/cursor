/**
 * Supabase Database Types
 * Generated types for the Supabase database schema
 */

export interface Database {
  public: {
    Tables: {
      // Payload CMS tables (these will be created by Payload)
      payload_users: {
        Row: {
          id: string
          email: string
          first_name?: string
          last_name?: string
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          email: string
          first_name?: string
          last_name?: string
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          email?: string
          first_name?: string
          last_name?: string
          created_at?: string
          updated_at?: string
        }
      }
      payload_media: {
        Row: {
          id: string
          filename: string
          mime_type: string
          filesize: number
          width?: number
          height?: number
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          filename: string
          mime_type: string
          filesize: number
          width?: number
          height?: number
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          filename?: string
          mime_type?: string
          filesize?: number
          width?: number
          height?: number
          created_at?: string
          updated_at?: string
        }
      }
      // Additional Payload tables will be generated by Payload CMS
      // These are placeholder types that will be extended
      services: {
        Row: Record<string, any>
        Insert: Record<string, any>
        Update: Record<string, any>
      }
      case_studies: {
        Row: Record<string, any>
        Insert: Record<string, any>
        Update: Record<string, any>
      }
      testimonials: {
        Row: Record<string, any>
        Insert: Record<string, any>
        Update: Record<string, any>
      }
      blog_posts: {
        Row: Record<string, any>
        Insert: Record<string, any>
        Update: Record<string, any>
      }
      team_members: {
        Row: Record<string, any>
        Insert: Record<string, any>
        Update: Record<string, any>
      }
      clients: {
        Row: Record<string, any>
        Insert: Record<string, any>
        Update: Record<string, any>
      }
      faqs: {
        Row: Record<string, any>
        Insert: Record<string, any>
        Update: Record<string, any>
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      create_extension_if_not_exists: {
        Args: { extension_name: string }
        Returns: undefined
      }
      get_table_stats: {
        Args: {}
        Returns: Array<{
          table_name: string
          row_count: number
          size_bytes: number
        }>
      }
    }
    Enums: {
      [_ in never]: never
    }
  }
}

// Helper types for working with Supabase
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']
export type Inserts<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert']
export type Updates<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update']

// Supabase response types
export interface SupabaseResponse<T> {
  data: T | null
  error: Error | null
}

export interface SupabaseListResponse<T> {
  data: T[] | null
  error: Error | null
  count?: number
}

// Authentication types
export interface AuthUser {
  id: string
  email: string
  user_metadata?: Record<string, any>
  app_metadata?: Record<string, any>
  created_at: string
  updated_at: string
}

export interface AuthSession {
  access_token: string
  refresh_token: string
  expires_in: number
  token_type: string
  user: AuthUser
}

// Configuration types
export interface SupabaseConfig {
  url: string
  anonKey: string
  serviceRoleKey?: string
}

export interface DatabaseConnectionConfig {
  connectionString: string
  poolConfig: {
    min: number
    max: number
    idleTimeoutMillis: number
    connectionTimeoutMillis: number
  }
}